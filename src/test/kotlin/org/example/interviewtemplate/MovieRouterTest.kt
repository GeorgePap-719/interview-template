package org.example.interviewtemplate

import kotlinx.coroutines.runBlocking
import org.example.interviewtemplate.dto.*
import org.example.interviewtemplate.repositories.UserRepository
import org.junit.jupiter.api.AfterEach
import org.junit.jupiter.api.TestInstance
import org.springframework.beans.factory.annotation.Autowired
import org.springframework.boot.test.context.SpringBootTest
import org.springframework.boot.test.web.server.LocalServerPort
import org.springframework.http.MediaType
import org.springframework.security.test.context.support.WithMockUser
import org.springframework.web.reactive.function.client.WebClient
import kotlin.test.Test
import kotlin.test.assertEquals
import kotlin.test.assertNotNull

@SpringBootTest(webEnvironment = SpringBootTest.WebEnvironment.RANDOM_PORT)
@TestInstance(TestInstance.Lifecycle.PER_CLASS)
class MovieRouterTest(
    @Autowired
    private val webClient: WebClient,
    @Autowired
    private val userRepository: UserRepository,
    @LocalServerPort
    private val port: Int
) {
    private val baseUrl = defaultUrl(port)

    private val registerUriApi = "$baseUrl/auth/register"

    @AfterEach
    fun afterEach(): Unit = runBlocking {
//        userRepository.deleteAll()
    }

    @Test
    @WithMockUser
    fun testRegisterMovie(): Unit = runBlocking {
        val registerUser = RegisterUser(randomName(), randomPass())
        val user = registerUser(registerUser)
        val newMovie = RegisterMovie(
            "movie" + randomName(),
            "cool one",
            user.id
        )
        val response = webClient.post()
            .uri("$baseUrl/movies")
            .accept(MediaType.APPLICATION_JSON)
            .bodyValue(newMovie)
            .awaitRetrieveEntity<Movie>()
        assert(response.statusCode.value() == 201)
        val expected = Movie(
            title = newMovie.title,
            description = newMovie.description,
            userId = newMovie.userId,
            date = "",
            likes = 0,
            hates = 0
        )
        assertMoviesEquals(expected, response.body)
    }

    @Test
    @WithMockUser(username = "test123")
    fun testPostOpinion(): Unit = runBlocking {
        val registerUser = RegisterUser("test123", randomPass())
        val user = registerUser(registerUser)
        val newMovie = RegisterMovie(
            "movie" + randomName(),
            "cool one",
            user.id
        )
        val response = webClient.post()
            .uri("$baseUrl/movies")
            .accept(MediaType.APPLICATION_JSON)
            .bodyValue(newMovie)
            .awaitRetrieveEntity<Movie>()
        val movieOpinion = MovieOpinion(
            newMovie.title,
            Opinion.LIKE
        )
//        webClient.post()
//            .uri("$baseUrl/movies/opinion")
//            .accept(MediaType.APPLICATION_JSON)
//            .bodyValue(movieOpinion)
//            .awaitRetrieveEntity<String>()
    }

    // Skip asserting `date`, as it is generated by db.
    private fun assertMoviesEquals(expected: Movie, actual: Movie?) {
        assertNotNull(actual)
        assertEquals(expected.title, actual.title)
        assertEquals(expected.description, actual.description)
        assertEquals(expected.userId, actual.userId)
        assertEquals(expected.likes, actual.likes)
        assertEquals(expected.hates, actual.hates)
        assert(actual.date.isNotBlank())
    }


    private suspend fun registerUser(user: RegisterUser): User {
        val response = webClient.post()
            .uri(registerUriApi)
            .contentType(MediaType.APPLICATION_JSON)
            .accept(MediaType.APPLICATION_JSON)
            .bodyValue(user)
            .awaitRetrieveEntity<User>()
        assert(response.statusCode.value() == 201)
        return requireNotNull(response.body)
    }
}